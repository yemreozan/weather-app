{"version":3,"sources":["services/api.js","services/WeatherService.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","process","headers","Content-Type","interceptors","response","use","undefined","err","alert","data","message","Promise","reject","weather","params","resolve","get","concat","city","country","then","res","error","catch","Weather","_useState","useState","temperature","humidity","description","_useState2","Object","slicedToArray","state","setState","_useState3","_useState4","setCity","_useState5","_useState6","setCountry","react_default","a","createElement","react","type","value","onChange","e","target","onClick","main","temp","name","sys","console","log","getWeather","App","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qNAEMA,SAAMC,EAAMC,OAAO,CACvBC,QAASC,yCACTC,QAAS,CACPC,eAAgB,sBAIpBN,EAAIO,aAAaC,SAASC,SAAIC,EAAW,SAAAC,GAMvC,OALKA,EAAIH,SAGPI,MAAMD,EAAIH,SAASK,KAAKC,SAFxBF,MAAM,uFAIDG,QAAQC,OAAOL,KAGTX,QChBFiB,EAAU,SAAAC,GAAM,OAC3B,IAAIH,QAAQ,SAACI,EAASH,GACpBhB,EACGoB,IADH,cAAAC,OACqBH,EAAOI,KAD5B,KAAAD,OACoCH,EAAOK,QAD3C,WAAAF,OAC4DjB,qCACzDoB,KAAK,SAAAC,GACAA,EAAIC,MACNV,EAAOS,GAEPN,EAAQM,KAGXE,MAAM,SAAAD,GAAK,OAAIV,EAAOU,QC8BdE,MAvCf,WACE,IADiBC,EASSC,mBARN,CAClBC,YAAc,GACdT,KAAO,GACPC,QAAU,GACVS,SAAW,GACXC,YAAc,KANCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GASVQ,EATUH,EAAA,GASHI,EATGJ,EAAA,GAAAK,EAUOT,mBAAS,YAVhBU,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAUVjB,EAVUkB,EAAA,GAUJC,EAVID,EAAA,GAAAE,EAWaZ,mBAAS,MAXtBa,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAWVnB,EAXUoB,EAAA,GAWDC,EAXCD,EAAA,GAyBjB,OACEE,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAO5B,EAAM6B,SAAU,SAAAC,GAAC,OAAIX,EAAQW,EAAEC,OAAOH,UAChEL,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAO3B,EAAS4B,SAAU,SAAAC,GAAC,OAAIR,EAAWQ,EAAEC,OAAOH,UACtEL,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASK,QAAS,kBAhBhB,SAAChC,EAAMC,GACxBN,EAAQ,CAAEK,OAAMC,YACbC,KAAK,SAAAC,GAAG,OAAIa,EAAS,CACpBP,YAAaN,EAAIZ,KAAK0C,KAAKC,KAC3BlC,KAAMG,EAAIZ,KAAK4C,KACflC,QAASE,EAAIZ,KAAK6C,IAAInC,QACtBS,SAAUP,EAAIZ,KAAK0C,KAAKvB,SACxBC,YAAaR,EAAIZ,KAAKI,QAAQ,GAAGgB,gBAElCN,MAAM,SAAAD,GAAK,OAAIiC,QAAQC,IAAIlC,KAOSmC,CAAWvC,EAAMC,KAAtD,uBACAsB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAAH,MAAmCV,EAAMN,aACzCc,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sBAAH,MAA4BV,EAAMf,MAClCuB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yBAAH,MAA+BV,EAAMd,SACrCsB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BAAH,MAAgCV,EAAML,UACtCa,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAAH,MAAmCV,EAAMJ,eC5BhC6B,MANf,WACE,OACEjB,EAAAC,EAAAC,cAACgB,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.abd5010a.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_WEATHER_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.response.use(undefined, err => {\n  if (!err.response) {\n    alert('We were not able to complete this process. Please wait a moment and then try again.');\n  } else {\n    alert(err.response.data.message);\n  }\n  return Promise.reject(err);\n});\n\nexport default api;","import api from './api';\n\nexport const weather = params =>\n  new Promise((resolve, reject) => {\n    api\n      .get(`/weather?q=${params.city},${params.country}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n      .then(res => {\n        if (res.error) {\n          reject(res);\n        } else {\n          resolve(res);\n        }\n      })\n      .catch(error => reject(error));\n  });","import React, { Fragment, useState } from 'react';\n\nimport { weather } from '../services/WeatherService';\n\nfunction Weather() {\n  const initalState = {\n    temperature : '',\n    city : '',\n    country : '',\n    humidity : '',\n    description : '',\n  }\n\n  const [state, setState] = useState(initalState);\n  const [city, setCity] = useState('Istanbul');\n  const [country, setCountry] = useState('TR');\n\n  const getWeather = (city, country) => {\n    weather({ city, country })\n      .then(res => setState({\n        temperature: res.data.main.temp,\n        city: res.data.name,\n        country: res.data.sys.country,\n        humidity: res.data.main.humidity,\n        description: res.data.weather[0].description,\n      }))\n      .catch(error => console.log(error));\n  }\n\n  return (\n    <Fragment>\n      <input type=\"text\" value={city} onChange={e => setCity(e.target.value)}/>\n      <input type=\"text\" value={country} onChange={e => setCountry(e.target.value)} />\n      <button type=\"button\" onClick={() => getWeather(city, country)}> Get Weather Status</button>\n      <p><strong>Temperature</strong> : {state.temperature}</p>\n      <p><strong>City</strong> : {state.city}</p>\n      <p><strong>Country</strong> : {state.country}</p>\n      <p><strong>Humidity</strong> : {state.humidity}</p>\n      <p><strong>Description</strong> : {state.description}</p>\n    </Fragment>\n  )\n}\n\nexport default Weather;","import React from 'react';\n\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <Weather />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}