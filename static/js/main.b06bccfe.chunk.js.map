{"version":3,"sources":["components/Location.js","services/api.js","services/WeatherService.js","components/Current.js","components/Forecast.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Location","_ref","state","handleClick","_useState","useState","city","_useState2","Object","slicedToArray","setCity","_useState3","country","_useState4","setCountry","useEffect","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","react_default","a","createElement","id","className","type","value","onChange","e","target","onClick","api","axios","create","baseURL","process","headers","Content-Type","interceptors","response","use","undefined","err","alert","data","message","Promise","reject","weather","params","resolve","get","concat","then","res","error","catch","forecast","Current","props","_props$state","setState","getWeather","temperature","main","temp","min","temp_min","max","temp_max","humidity","description","Forecast","getForecast","list","map","item","key","Date","dt","getHours","Weather","react","components_Location","components_Current","components_Forecast","App","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b06bccfe.chunk.js","sourcesContent":["import React, { useState, useEffect }  from 'react';\n\nfunction Location({ state, handleClick }) {\n  const [city, setCity] = useState(state.city);\n  const [country, setCountry] = useState(state.country);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log('latitude:',position.coords.latitude);\n        console.log('longitude:',position.coords.longitude);\n      })\n    }\n  }, []);\n\n  return (\n    <section id=\"Location\">\n      <div className=\"container\">\n        <div className=\"form-row\">\n          <div className=\"col-md-5 mt-3\">\n            <input type=\"text\" className=\"form-control\" value={city} onChange={e => setCity(e.target.value)}/>\n          </div>\n          <div className=\"col-md-5 mt-3\">\n            <input type=\"text\" className=\"form-control\" value={country} onChange={e => setCountry(e.target.value)}/>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <button type=\"button\" className=\"btn btn-block btn-light\" onClick={() => handleClick({ city, country })}>Get Statuses</button>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Location;","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_WEATHER_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.response.use(undefined, err => {\n  if (!err.response) {\n    alert('We were not able to complete this process. Please wait a moment and then try again.');\n  } else {\n    alert(err.response.data.message);\n  }\n  return Promise.reject(err);\n});\n\nexport default api;","import api from './api';\n\nexport const weather = params =>\n  new Promise((resolve, reject) => {\n    api\n      .get(`/weather?q=${params.city},${params.country}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n      .then(res => {\n        if (res.error) {\n          reject(res);\n        } else {\n          resolve(res);\n        }\n      })\n      .catch(error => reject(error));\n  });\n\nexport const forecast = params =>\n  new Promise((resolve, reject) => {\n    api\n      .get(`/forecast?q=${params.city},${params.country}&cnt=5&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n      .then(res => {\n        if (res.error) {\n          reject(res);\n        } else {\n          resolve(res);\n        }\n      })\n      .catch(error => reject(error));\n  });","import React, { useState, useEffect } from 'react';\n\nimport { weather } from '../services/WeatherService';\n\nfunction Current(props) {\n  const { city, country } = props.state;\n  const [ state, setState ] = useState(null);\n\n  useEffect(() => {\n      getWeather(city, country);\n  }, [city, country]);\n\n  const getWeather = (city, country) => {\n    weather({ city, country })\n      .then(res => setState({\n        temperature: res.data.main.temp,\n        min: res.data.main.temp_min,\n        max: res.data.main.temp_max,\n        humidity: res.data.main.humidity,\n        description: res.data.weather[0].description,\n      }))\n      .catch(error => console.log(error));\n  }\n\n  return state && (\n    <section id=\"Current\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 d-flex justify-content-center\">\n            <i className=\"wa-sunny\" />\n          </div>\n          <div className=\"col-12 mt-4 d-flex justify-content-center\">\n            <div className=\"row\">\n              <div className=\"col-12 mb-3\">\n                <h1>{state.temperature}</h1>\n              </div>\n              <div className=\"col-6\">\n                <h2><strong>L </strong>{state.min}</h2>\n              </div>\n              <div className=\"col-6\">\n                <h2><strong>H </strong>{state.max}</h2>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Current;","import React, { useEffect, useState } from 'react';\n\nimport { forecast } from '../services/WeatherService';\n\nfunction Forecast(props) {\n  const { city, country } = props.state;\n  const [state, setState] = useState(null);\n\n  useEffect(() => {\n    getForecast(city, country);\n  }, [city, country]);\n\n  const getForecast = (city, country) => {\n    forecast({city, country})\n      .then(res => setState(res.data.list))\n      .catch(error => console.log(error));\n  }\n\n  return (\n    <section id=\"Forecast\">\n      <div className=\"container\">\n        <div className=\"row\">\n          {state && state.map((item ,key) => (\n            <div className=\"col forecast\" key={key}>\n              <p><strong>Date</strong> : {new Date(item.dt * 1000).getHours()}:00</p>\n              <p><strong>Temperature</strong> : {item.main.temp}</p>\n              <p><strong>Humidity</strong> : {item.main.humidity}</p>\n              <p><strong>Description</strong> : {item.weather[0].description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Forecast;","import React, { Fragment, useState } from 'react';\n\nimport Location from './Location';\nimport Current from './Current';\nimport Forecast from './Forecast';\n\nfunction Weather() {\n  const [state,setState] = useState({ city: 'Istanbul', country: 'TR'});\n\n  return (\n    <Fragment>\n      <Location\n        state={state}\n        handleClick={setState}\n      />\n      <Current\n        state={state}\n      />\n      <Forecast\n        state={state}\n      />\n    </Fragment>\n  )\n}\n\nexport default Weather;\n\n","import React from 'react';\n\nimport Weather from './components/Weather';\n\nfunction App() {\n  return <Weather />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}